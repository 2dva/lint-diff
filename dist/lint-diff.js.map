{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./lib/functional.js","webpack:///./lib/git.js","webpack:///./lint-diff.js","webpack:///external \"bluebird\"","webpack:///external \"eslint\"","webpack:///external \"execa\"","webpack:///external \"meow\"","webpack:///external \"path\"","webpack:///external \"ramda/src/T\"","webpack:///external \"ramda/src/addIndex\"","webpack:///external \"ramda/src/assoc\"","webpack:///external \"ramda/src/complement\"","webpack:///external \"ramda/src/cond\"","webpack:///external \"ramda/src/curry\"","webpack:///external \"ramda/src/curryN\"","webpack:///external \"ramda/src/defaultTo\"","webpack:///external \"ramda/src/endsWith\"","webpack:///external \"ramda/src/equals\"","webpack:///external \"ramda/src/evolve\"","webpack:///external \"ramda/src/filter\"","webpack:///external \"ramda/src/find\"","webpack:///external \"ramda/src/flatten\"","webpack:///external \"ramda/src/insert\"","webpack:///external \"ramda/src/isEmpty\"","webpack:///external \"ramda/src/length\"","webpack:///external \"ramda/src/map\"","webpack:///external \"ramda/src/merge\"","webpack:///external \"ramda/src/objOf\"","webpack:///external \"ramda/src/pipe\"","webpack:///external \"ramda/src/pipeP\"","webpack:///external \"ramda/src/pluck\"","webpack:///external \"ramda/src/prop\"","webpack:///external \"ramda/src/propEq\"","webpack:///external \"ramda/src/reduce\"","webpack:///external \"ramda/src/slice\"","webpack:///external \"ramda/src/split\"","webpack:///external \"ramda/src/startsWith\"","webpack:///external \"ramda/src/sum\"","webpack:///external \"ramda/src/tap\"","webpack:///external \"ramda/src/uniq\""],"names":["cli","meow","run","input","mapIndexed","reduceIndexed","firstItemStartsWith","prefix","list","doesNotStartWith","splitEveryTime","predicate","splitIndexes","acc","item","index","length","split","splitIndex","i","splitIndexList","previousIndex","currentIndex","getChangedLinesFromHunk","hunk","lineNumber","reduce","changedLines","line","Number","match","getHunksFromDiff","getChangedLinesFromDiff","linter","CLIEngine","formatter","getFormatter","getChangedFiles","commitRange","exec","path","resolve","getDiff","filename","then","getChangedFileLineMap","filePath","lintChangedLines","executeOnFiles","bind","filterLinterMessages","changedFileLineMap","linterOutput","filterMessagesByFile","result","fileLineMap","filterMessages","messages","message","includes","countBySeverity","severity","countWarningMessages","countErrorMessages","warningCount","transform","errorCount","applyLinter","logResults","console","log","getErrorCountFromReport","exitProcess","n","process","exit","reportResults","Promise","map"],"mappings":"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","file":"lint-diff.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","import meow from 'meow'\nimport run from './lint-diff'\n\nconst cli = meow(`\n  Usage\n    $ lint-diff [<diff-input>]\n\n  Examples\n    $ lint-diff\n    $ lint-diff HEAD~1..HEAD\n    $ lint-diff master..my-branch\n`)\n\nrun(cli.input[0])\n","import {\n  addIndex,\n  complement,\n  curry,\n  defaultTo,\n  filter,\n  insert,\n  isEmpty,\n  map,\n  pipe,\n  reduce,\n  slice,\n  startsWith,\n} from 'ramda'\n\nexport const mapIndexed = addIndex(map)\n\nexport const reduceIndexed = addIndex(reduce)\n\nexport const firstItemStartsWith = curry((prefix, list) =>\n  startsWith(prefix, list[0]))\n\nexport const doesNotStartWith = complement(startsWith)\n\nexport const splitEveryTime = curry((predicate, list) => {\n  const splitIndexes = pipe(\n    reduceIndexed((acc, item, index) => {\n      if (predicate(item)) {\n        return [...acc, index]\n      }\n\n      return acc\n    }, []),\n    insert(list.length - 1, list.length)\n  )(list)\n\n  const split = mapIndexed((splitIndex, i, splitIndexList) => {\n    const previousIndex = defaultTo(0, splitIndexList[i - 1])\n    const currentIndex = splitIndexList[i]\n\n    return slice(previousIndex, currentIndex, list)\n  })\n\n  return pipe(\n    split,\n    filter(complement(isEmpty))\n  )(splitIndexes)\n})\n","import {\n  filter,\n  flatten,\n  map,\n  pipe,\n  split,\n  startsWith,\n  uniq,\n} from 'ramda'\nimport {\n  doesNotStartWith,\n  firstItemStartsWith,\n  splitEveryTime,\n} from './functional'\n\nexport const getChangedLinesFromHunk = (hunk) => {\n  let lineNumber = 0\n\n  return hunk.reduce((changedLines, line) => {\n    if (startsWith('@@', line)) {\n      lineNumber = Number(line.match(/\\+([0-9]+)/)[1]) - 1\n      return changedLines\n    }\n\n    if (doesNotStartWith('-', line)) {\n      lineNumber += 1\n\n      if (startsWith('+', line)) {\n        return [...changedLines, lineNumber]\n      }\n    }\n\n    return changedLines\n  }, [])\n}\n\nexport const getHunksFromDiff = pipe(\n  split('\\n'),\n  splitEveryTime(startsWith('@@')),\n  filter(firstItemStartsWith('@@'))\n)\n\nexport const getChangedLinesFromDiff = pipe(\n  getHunksFromDiff,\n  map(getChangedLinesFromHunk),\n  flatten,\n  uniq\n)\n","import Promise from 'bluebird'\nimport exec from 'execa'\nimport path from 'path'\nimport { CLIEngine } from 'eslint'\nimport {\n  T,\n  assoc,\n  cond,\n  curry,\n  curryN,\n  endsWith,\n  evolve,\n  equals,\n  filter,\n  find,\n  length,\n  map,\n  merge,\n  objOf,\n  pipe,\n  pipeP,\n  pluck,\n  prop,\n  propEq,\n  split,\n  sum,\n  tap,\n} from 'ramda'\nimport { getChangedLinesFromDiff } from './lib/git'\n\nconst linter = new CLIEngine()\nconst formatter = linter.getFormatter()\n\nconst getChangedFiles = pipeP(\n  commitRange => exec('git', ['diff', commitRange, '--name-only', '--diff-filter=ACM']),\n  prop('stdout'),\n  split('\\n'),\n  filter(endsWith('.js')),\n  map(path.resolve)\n)\n\nconst getDiff = curry((commitRange, filename) =>\n  exec('git', ['diff', commitRange, filename])\n    .then(prop('stdout')))\n\nconst getChangedFileLineMap = curry((commitRange, filePath) => pipeP(\n  getDiff(commitRange),\n  getChangedLinesFromDiff,\n  objOf('changedLines'),\n  assoc('filePath', filePath)\n)(filePath))\n\nconst lintChangedLines = pipe(\n  map(prop('filePath')),\n  linter.executeOnFiles.bind(linter)\n)\n\nconst filterLinterMessages = changedFileLineMap => (linterOutput) => {\n  const filterMessagesByFile = (result) => {\n    const fileLineMap = find(propEq('filePath', result.filePath), changedFileLineMap)\n    const changedLines = prop('changedLines', fileLineMap)\n\n    const filterMessages = evolve({\n      messages: filter(message => changedLines.includes(message.line)),\n    })\n\n    return filterMessages(result)\n  }\n\n  const countBySeverity = severity =>\n    pipe(\n      filter(propEq('severity', severity)),\n      length\n    )\n\n  const countWarningMessages = countBySeverity(1)\n  const countErrorMessages = countBySeverity(2)\n\n  const warningCount = (result) => {\n    const transform = {\n      warningCount: countWarningMessages(result.messages),\n    }\n\n    return merge(result, transform)\n  }\n\n  const errorCount = (result) => {\n    const transform = {\n      errorCount: countErrorMessages(result.messages),\n    }\n\n    return merge(result, transform)\n  }\n\n  return pipe(\n    prop('results'),\n    map(pipe(\n      filterMessagesByFile,\n      warningCount,\n      errorCount\n    )),\n    objOf('results')\n  )(linterOutput)\n}\n\nconst applyLinter = changedFileLineMap => pipe(\n  lintChangedLines,\n  filterLinterMessages(changedFileLineMap)\n)(changedFileLineMap)\n\nconst logResults = pipe(\n  prop('results'),\n  formatter,\n  console.log\n)\n\nconst getErrorCountFromReport = pipe(\n  prop('results'),\n  pluck('errorCount'),\n  sum\n)\n\nconst exitProcess = curryN(2, n => process.exit(n))\n\nconst reportResults = pipe(\n  tap(logResults),\n  getErrorCountFromReport,\n  cond([\n    [equals(0), exitProcess(0)],\n    [T, exitProcess(1)],\n  ])\n)\n\nconst run = (commitRange = 'HEAD') => Promise.resolve(commitRange)\n  .then(getChangedFiles)\n  .map(getChangedFileLineMap(commitRange))\n  .then(applyLinter)\n  .then(reportResults)\n\nexport default run\n","module.exports = require(\"bluebird\");","module.exports = require(\"eslint\");","module.exports = require(\"execa\");","module.exports = require(\"meow\");","module.exports = require(\"path\");","module.exports = require(\"ramda/src/T\");","module.exports = require(\"ramda/src/addIndex\");","module.exports = require(\"ramda/src/assoc\");","module.exports = require(\"ramda/src/complement\");","module.exports = require(\"ramda/src/cond\");","module.exports = require(\"ramda/src/curry\");","module.exports = require(\"ramda/src/curryN\");","module.exports = require(\"ramda/src/defaultTo\");","module.exports = require(\"ramda/src/endsWith\");","module.exports = require(\"ramda/src/equals\");","module.exports = require(\"ramda/src/evolve\");","module.exports = require(\"ramda/src/filter\");","module.exports = require(\"ramda/src/find\");","module.exports = require(\"ramda/src/flatten\");","module.exports = require(\"ramda/src/insert\");","module.exports = require(\"ramda/src/isEmpty\");","module.exports = require(\"ramda/src/length\");","module.exports = require(\"ramda/src/map\");","module.exports = require(\"ramda/src/merge\");","module.exports = require(\"ramda/src/objOf\");","module.exports = require(\"ramda/src/pipe\");","module.exports = require(\"ramda/src/pipeP\");","module.exports = require(\"ramda/src/pluck\");","module.exports = require(\"ramda/src/prop\");","module.exports = require(\"ramda/src/propEq\");","module.exports = require(\"ramda/src/reduce\");","module.exports = require(\"ramda/src/slice\");","module.exports = require(\"ramda/src/split\");","module.exports = require(\"ramda/src/startsWith\");","module.exports = require(\"ramda/src/sum\");","module.exports = require(\"ramda/src/tap\");","module.exports = require(\"ramda/src/uniq\");"],"sourceRoot":""}